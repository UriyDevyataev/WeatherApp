//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 5 storyboards.
  struct storyboard {
    /// Storyboard `ChoiseCity`.
    static let choiseCity = _R.storyboard.choiseCity()
    /// Storyboard `CityWeathe`.
    static let cityWeathe = _R.storyboard.cityWeathe()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `MainWeather`.
    static let mainWeather = _R.storyboard.mainWeather()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "ChoiseCity", bundle: ...)`
    static func choiseCity(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.choiseCity)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "CityWeathe", bundle: ...)`
    static func cityWeathe(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.cityWeathe)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "MainWeather", bundle: ...)`
    static func mainWeather(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.mainWeather)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 6 files.
  struct file {
    /// Resource file `Clouds.sks`.
    static let cloudsSks = Rswift.FileResource(bundle: R.hostingBundle, name: "Clouds", pathExtension: "sks")
    /// Resource file `Mist.sks`.
    static let mistSks = Rswift.FileResource(bundle: R.hostingBundle, name: "Mist", pathExtension: "sks")
    /// Resource file `Night.sks`.
    static let nightSks = Rswift.FileResource(bundle: R.hostingBundle, name: "Night", pathExtension: "sks")
    /// Resource file `RainLight.sks`.
    static let rainLightSks = Rswift.FileResource(bundle: R.hostingBundle, name: "RainLight", pathExtension: "sks")
    /// Resource file `SnowLight.sks`.
    static let snowLightSks = Rswift.FileResource(bundle: R.hostingBundle, name: "SnowLight", pathExtension: "sks")
    /// Resource file `Sun.sks`.
    static let sunSks = Rswift.FileResource(bundle: R.hostingBundle, name: "Sun", pathExtension: "sks")

    /// `bundle.url(forResource: "Clouds", withExtension: "sks")`
    static func cloudsSks(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.cloudsSks
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Mist", withExtension: "sks")`
    static func mistSks(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.mistSks
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Night", withExtension: "sks")`
    static func nightSks(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.nightSks
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "RainLight", withExtension: "sks")`
    static func rainLightSks(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.rainLightSks
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SnowLight", withExtension: "sks")`
    static func snowLightSks(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.snowLightSks
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Sun", withExtension: "sks")`
    static func sunSks(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sunSks
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 7 images.
  struct image {
    /// Image `bokeh`.
    static let bokeh = Rswift.ImageResource(bundle: R.hostingBundle, name: "bokeh")
    /// Image `cloudss`.
    static let cloudss = Rswift.ImageResource(bundle: R.hostingBundle, name: "cloudss")
    /// Image `mist2`.
    static let mist2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "mist2")
    /// Image `mist`.
    static let mist = Rswift.ImageResource(bundle: R.hostingBundle, name: "mist")
    /// Image `spark`.
    static let spark = Rswift.ImageResource(bundle: R.hostingBundle, name: "spark")
    /// Image `sun2`.
    static let sun2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "sun2")
    /// Image `sun`.
    static let sun = Rswift.ImageResource(bundle: R.hostingBundle, name: "sun")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bokeh", bundle: ..., traitCollection: ...)`
    static func bokeh(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bokeh, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cloudss", bundle: ..., traitCollection: ...)`
    static func cloudss(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cloudss, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mist", bundle: ..., traitCollection: ...)`
    static func mist(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mist, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mist2", bundle: ..., traitCollection: ...)`
    static func mist2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mist2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "spark", bundle: ..., traitCollection: ...)`
    static func spark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.spark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sun", bundle: ..., traitCollection: ...)`
    static func sun(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sun, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sun2", bundle: ..., traitCollection: ...)`
    static func sun2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sun2, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"
            static let uiSceneStoryboardFile = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneStoryboardFile") ?? "Main"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 5 nibs.
  struct nib {
    /// Nib `AllWeatherCollectionViewCell`.
    static let allWeatherCollectionViewCell = _R.nib._AllWeatherCollectionViewCell()
    /// Nib `CityTableViewCell`.
    static let cityTableViewCell = _R.nib._CityTableViewCell()
    /// Nib `DayCollectionViewCell`.
    static let dayCollectionViewCell = _R.nib._DayCollectionViewCell()
    /// Nib `HourCollectionViewCell`.
    static let hourCollectionViewCell = _R.nib._HourCollectionViewCell()
    /// Nib `WeatherTableViewCell`.
    static let weatherTableViewCell = _R.nib._WeatherTableViewCell()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AllWeatherCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.allWeatherCollectionViewCell) instead")
    static func allWeatherCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.allWeatherCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CityTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.cityTableViewCell) instead")
    static func cityTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.cityTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "DayCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.dayCollectionViewCell) instead")
    static func dayCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.dayCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HourCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.hourCollectionViewCell) instead")
    static func hourCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.hourCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "WeatherTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.weatherTableViewCell) instead")
    static func weatherTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.weatherTableViewCell)
    }
    #endif

    static func allWeatherCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AllWeatherCollectionViewCell? {
      return R.nib.allWeatherCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AllWeatherCollectionViewCell
    }

    static func cityTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CityTableViewCell? {
      return R.nib.cityTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CityTableViewCell
    }

    static func dayCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DayCollectionViewCell? {
      return R.nib.dayCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DayCollectionViewCell
    }

    static func hourCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HourCollectionViewCell? {
      return R.nib.hourCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HourCollectionViewCell
    }

    static func weatherTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WeatherTableViewCell? {
      return R.nib.weatherTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WeatherTableViewCell
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 3 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `DayCollectionViewCellIdent`.
    static let dayCollectionViewCellIdent: Rswift.ReuseIdentifier<DayCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "DayCollectionViewCellIdent")
    /// Reuse identifier `HourCollectionViewCellIdent`.
    static let hourCollectionViewCellIdent: Rswift.ReuseIdentifier<HourCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "HourCollectionViewCellIdent")
    /// Reuse identifier `WeatherTableViewCellIdentifire`.
    static let weatherTableViewCellIdentifire: Rswift.ReuseIdentifier<WeatherTableViewCell> = Rswift.ReuseIdentifier(identifier: "WeatherTableViewCellIdentifire")

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 4 localization keys.
    struct localizable {
      /// en translation: Delete
      ///
      /// Locales: en, ru
      static let searhBarClear = Rswift.StringResource(key: "searh.bar.clear", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Max.: %@, min.: %@
      ///
      /// Locales: en, ru
      static let maxMinLabel = Rswift.StringResource(key: "max.min.label", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Today
      ///
      /// Locales: en, ru
      static let dayToday = Rswift.StringResource(key: "day.today", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: search
      ///
      /// Locales: en, ru
      static let searhBarPlaceholder = Rswift.StringResource(key: "searh.bar.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)

      /// en translation: Delete
      ///
      /// Locales: en, ru
      static func searhBarClear(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("searh.bar.clear", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "searh.bar.clear"
        }

        return NSLocalizedString("searh.bar.clear", bundle: bundle, comment: "")
      }

      /// en translation: Max.: %@, min.: %@
      ///
      /// Locales: en, ru
      static func maxMinLabel(_ value1: String, _ value2: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("max.min.label", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1, value2)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "max.min.label"
        }

        let format = NSLocalizedString("max.min.label", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1, value2)
      }

      /// en translation: Today
      ///
      /// Locales: en, ru
      static func dayToday(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("day.today", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "day.today"
        }

        return NSLocalizedString("day.today", bundle: bundle, comment: "")
      }

      /// en translation: search
      ///
      /// Locales: en, ru
      static func searhBarPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("searh.bar.placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "searh.bar.placeholder"
        }

        return NSLocalizedString("searh.bar.placeholder", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib {
    struct _AllWeatherCollectionViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AllWeatherCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AllWeatherCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AllWeatherCollectionViewCell
      }

      fileprivate init() {}
    }

    struct _CityTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CityTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CityTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CityTableViewCell
      }

      fileprivate init() {}
    }

    struct _DayCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = DayCollectionViewCell

      let bundle = R.hostingBundle
      let identifier = "DayCollectionViewCellIdent"
      let name = "DayCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DayCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DayCollectionViewCell
      }

      fileprivate init() {}
    }

    struct _HourCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = HourCollectionViewCell

      let bundle = R.hostingBundle
      let identifier = "HourCollectionViewCellIdent"
      let name = "HourCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HourCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HourCollectionViewCell
      }

      fileprivate init() {}
    }

    struct _WeatherTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = WeatherTableViewCell

      let bundle = R.hostingBundle
      let identifier = "WeatherTableViewCellIdentifire"
      let name = "WeatherTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WeatherTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WeatherTableViewCell
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try choiseCity.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try cityWeathe.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try mainWeather.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct choiseCity: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let choiseCityVC = StoryboardViewControllerResource<CCViewController>(identifier: "ChoiseCityVC")
      let name = "ChoiseCity"

      func choiseCityVC(_: Void = ()) -> CCViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: choiseCityVC)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.choiseCity().choiseCityVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'choiseCityVC' could not be loaded from storyboard 'ChoiseCity' as 'CCViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct cityWeathe: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let cityWeatherVC = StoryboardViewControllerResource<CWViewController>(identifier: "CityWeatherVC")
      let name = "CityWeathe"

      func cityWeatherVC(_: Void = ()) -> CWViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: cityWeatherVC)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.cityWeathe().cityWeatherVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'cityWeatherVC' could not be loaded from storyboard 'CityWeathe' as 'CWViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let bundle = R.hostingBundle
      let name = "Main"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct mainWeather: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let mainWeatherVC = StoryboardViewControllerResource<MWViewController>(identifier: "MainWeatherVC")
      let name = "MainWeather"

      func mainWeatherVC(_: Void = ()) -> MWViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mainWeatherVC)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.mainWeather().mainWeatherVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mainWeatherVC' could not be loaded from storyboard 'MainWeather' as 'MWViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
